#!/usr/bin/env ruby
#-*- ruby -*- # Pour etre en mode Ruby dans emacs

require 'gli'
require 'fileutils'

begin # XXX: Remove this begin/rescue before distributing your app
  require 'gv'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/gv` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/gv now"

  exit 64
end

# Des alias, pour alleger le code.
GV = GestionEquipements
ENTREPOT = GestionEquipements::EntrepotEquipements


# Attributs lies au type de BD utilise.
BD = BDTexte

# BD textuelle style CSV, avec separateur = ":"
FORMAT_BD_TEXTE = :csv
SEPARATEUR_BD_TEXTE = ':'
DEPOT_DEFAUT = '.joueur.txt'     # Fichier par defaut pour depot.

# Injection des dependances pour la BD textuelle.
BD.config( FORMAT_BD_TEXTE, GestionEquipements::Equipement,
           separateur: SEPARATEUR_BD_TEXTE,
           exception_a_signaler: GestionEquipements::Exception )


#############################################################################
# Specification de l'application avec GLI
#############################################################################

include GLI::App

program_desc "Application en ligne de commande pour gestion d'une cave a vins"
version GV::VERSION

subcommand_option_handling :normal
arguments :strict
preserve_argv  # Pour que ARGV ne soit pas modifie -- utile en cas d'erreur pour le message.

desc 'Depot de donnees a utiliser pour la cave a vins'
default_value DEPOT_DEFAUT
flag :depot

desc 'Utilisation de stdin plutot que le depot'
switch [:stdin, :'']

##############################################################
# Specifications des diverses commandes
##############################################################

#=================================
# Commande init
#
# Arguments:  [--detruire]
#
# Erreurs:
#  - le depot existe deja et l'option --detruire n'a pas ete indiquee
#  - argument(s) en trop
#=================================
desc "Cree une nouvelle base de donnees pour gerer des vins (dans './#{DEPOT_DEFAUT}' si --depot n'est pas specifie)"
skips_pre
skips_post
command :init do |init|
  init.desc 'Detruit le fichier du depot s\'il existe deja'
  init.switch :detruire

  init.action do |global_options,options,_args|
    BD.init( global_options[:depot], detruire: options[:detruire] )
  end
end


#=================================
# Commande equiper
#
# Arguments: [--numero={id}] [--meilleur]
#
# Valeurs par defaut si options omises:
#   --meilleur
#
# Erreurs:
# - depot invalide (- ne peut pas etre utilise)
# - argument(s) en trop
#=================================
desc 'Equiper une pièce d\'équipement'
arg_name 'numero'
command :equiper do |equiper|

  equiper.desc 'Numéro de l\'armure ou de l\'arme à équiper'
  equiper.flag :numero

  equiper.desc 'Équipe la meilleure armure et la meilleur arme de chaque catégorie'
  equiper.switch :meilleur

  equiper.action do |_global_options,options,args|
    option = [:numero, :meilleur].select { |opt| options[opt] }
    option = [:meilleur] if option.empty?
    erreur_trop_arguments :ajouter, *args if args.size > 1
    erreur_nombre_incorrect_arguments :ajouter, *args unless args.empty? || args.size == 2

    numero = options[:numero] || -1
    le_format = case option.shift
      when :numero then ENTREPOT.remplacer_equipement_specifique( numero.to_i )
      when :meilleur then ENTREPOT.remplacer_tous_equipements()
      else ENTREPOT.remplacer_tous_equipements()
    end
  end
end

#=================================
# Commande jouer
#
# Erreurs:
#  - argument(s) en trop
# - nombre incorrect d'arguments
#=================================
desc 'Permet de combattre avec son héros'
skips_post
command :jouer do |jouer|
  jouer.action do |_global_options,options,args|
    erreur_trop_arguments :ajouter, *args if args.size > 0
    erreur_nombre_incorrect_arguments :ajouter, *args unless args.empty? || args.size == 1
    ENTREPOT.jouer()
  end
end


#=================================
# Commande trier
#
# Arguments: [--numero|--date-type|--puissance|--cle=CLE] [--reverse]
#
# Valeur par defaut si options omises:
#   --numero
#
# Erreurs:
# - argument(s) en trop
#
# Les cles de tri:
#   I => numero
#   L => type
#   O => puissance
#=================================
desc 'Tri les enregistrements selon divers criteres'
skips_post
command :trier do |trier|
  champ_pour_cle = {
    'I' => :numero,
    'L' => :type,
    'O' => :puissance,
  }
  cles_de_tri = [:numero, :type, :puissance]

  trier.desc "Trie selon l'identifiant"; trier.switch :numero
  trier.desc "Trie selon le type d'equipement"; trier.switch :type
  trier.desc "Trie selon la puissance de l'equipement"; trier.switch :puissance

  trier.desc "Trie en ordre inverse"; trier.switch :reverse
  trier.desc "Trie selon divers champs"; trier.flag :cle, must_match: /[#{champ_pour_cle.keys}]+/

  trier.action do |_global_options,options,_args|
    cles = cles_de_tri.select { |c| options[c] }.reduce([], :<<)

    if options[:cle]
      cles += options[:cle].chars.map { |c| champ_pour_cle[c] }.reduce([], :<<)
    end

    puts(ENTREPOT.trier( cles, options[:reverse] ) )
  end
end

#=================================
# Commande lister
#
# Arguments: [--status|--inventaire|--format=un_format]
#
# Valeur par defaut si option omise:
#   --status
#
# Erreurs:
# - argument(s) en trop
#=================================
desc 'Affiche le status du héros ou de son inventaire'
skips_post
command [:lister, :ls] do |lister|
  EQUIPEMENTS  = '%-2I: %-20N (%L) - puissance: %O'

  lister.desc 'Affiche les statistiques du héros'
  lister.switch :status

  lister.desc 'Affiche tous les équipements du héros'
  lister.switch :inventaire

  lister.desc 'Affiche avec un format specifique'
  lister.flag :format

  lister.action do |_global_options,options,_args|
    option = [:status, :inventaire, :format].select { |opt| options[opt] }
    option = [:status] if option.empty?
    status = ENTREPOT.creer_status()
    le_format = case option.shift
    when :status  then return print ENTREPOT.les_equipements[0].to_s(status) << "\n"
                when :inventaire   then EQUIPEMENTS
                when :format then options[:format]
                end
    erreur "lister: trop d'options indiquees: #{option}" unless option.empty?

    print ENTREPOT.les_equipements.map { |e| e.to_s(le_format) << "\n" }.join

  end
end


###################################################
# Methodes pour traitement des erreurs.
###################################################

def erreur( msg )
  fail GV::Exception, msg
end

def erreur_trop_arguments( commande, *args )
  erreur "#{commande}: arguments en trop: #{args.join(' ')}"
end

def erreur_nombre_incorrect_arguments( commande, *args )
  erreur "#{commande}: nombre incorrect d'arguments: #{args.join(' ')}"
end

on_error do |exception|
  case exception
  when GLI::MissingRequiredArgumentsException
    STDERR.puts "*** Erreur: arguments en trop: #{ARGV.join(' ')}"
  when GLI::UnknownCommandArgument
    STDERR.puts "*** Erreur: argument ou option de commande invalide: #{ARGV.join(' ')}"
  when GV::Exception
    STDERR.puts "*** Erreur: #{exception.message}"
  else
    STDERR.puts "*** Oops! Exception signalee durant l'execution de #{$0} ***"
    STDERR.puts exception.message
    STDERR.puts exception.inspect
    STDERR.puts exception.backtrace
  end
end


###################################################
# Pre/post hook des commandes et lancement du programme
###################################################

COMMANDES_MODIFIANT_DEPOT = [:equiper]

pre do |global_options,command,_options,_args|
  depot = global_options[:stdin] ? '-' : global_options[:depot]

  if COMMANDES_MODIFIANT_DEPOT.include?(command.name)
    erreur "Le flux stdin ne peut pas etre utilise pour la commande #{command.name}" if depot == '-'
  end

  ENTREPOT.ouvrir( depot, BD )

  true
end

post do |_global_options,_command,_options,_args|
  ENTREPOT.fermer
end

exit run(ARGV)
